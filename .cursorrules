# R√®gles Cursor pour TP Machine NestJS - Syst√®me d'Authentification & Watchlist

## üéØ CONTEXTE
- TP Machine de 2h sur NestJS
- Sujet : Syst√®me d'authentification complet + Application Watchlist
- Base de donn√©es PostgreSQL avec Prisma
- Email via MailDev (Docker) pour validation et 2FA
- Documentation Swagger obligatoire
- Authentification JWT + 2FA par email
- Gestion des r√¥les (USER, ADMIN)
- Ressources priv√©es par utilisateur

## üìã R√àGLES DE D√âVELOPPEMENT

### 1. ARCHITECTURE NESTJS
- Toujours utiliser l'architecture modulaire NestJS
- Cr√©er des modules s√©par√©s pour chaque entit√© m√©tier
- Utiliser les d√©corateurs NestJS (@Controller, @Injectable, @Module, etc.)
- Respecter la s√©paration Controller/Service/Repository

### 2. BASE DE DONN√âES
- Utiliser UNIQUEMENT Prisma pour les op√©rations DB
- Cr√©er des DTOs avec class-validator pour la validation
- Utiliser PrismaService existant (pas de nouveau service DB)
- Toujours g√©rer les erreurs de base de donn√©es
- **Mod√®les n√©cessaires** : User, Movie, EmailVerification, TwoFactorCode
- **Relations** : User -> Movie (one-to-many)
- **Champs User** : id, email, password, username, role, isEmailVerified
- **Champs Movie** : id, title, description, year, userId

### 3. VALIDATION ET S√âCURIT√â
- Validation obligatoire avec class-validator
- Utiliser @IsEmail(), @IsString(), @IsOptional(), etc.
- Validation globale d√©j√† configur√©e (whitelist: true)
- Toujours valider les entr√©es utilisateur
- **Hashage des mots de passe** avec bcrypt
- **JWT pour l'authentification** (pas de sessions)
- **Guards pour prot√©ger** les endpoints priv√©s
- **D√©corateurs @Roles()** pour la gestion des r√¥les
- **Validation des tokens** d'email et codes 2FA

### 4. EMAIL (MAILDEV)
- Utiliser MailDev pour les tests (port 1025 SMTP)
- Interface web MailDev : http://localhost:1080
- Cr√©er un service d'email r√©utilisable
- G√©rer les erreurs d'envoi d'email
- **Validation par email** lors de l'inscription
- **Envoi de codes 2FA** par email lors de la connexion
- Templates d'email pour validation et 2FA

### 5. DOCUMENTATION
- Documentation Swagger OBLIGATOIRE
- Utiliser @ApiTags, @ApiOperation, @ApiResponse
- Documenter tous les endpoints
- Exemple de requ√™te/r√©ponse pour chaque endpoint

### 6. CODE STYLE
- TypeScript strict
- Interfaces pour tous les types
- Gestion d'erreurs avec try/catch
- Logs appropri√©s pour le debugging

## üö´ INTERDICTIONS
- Pas de Tailwind CSS (backend uniquement)
- Pas de nouvelles d√©pendances sans validation
- Pas de code frontend
- Pas de modification de la configuration existante

## ‚úÖ CHECKLIST TP
### üîê AUTHENTIFICATION
- [ ] Module Auth cr√©√© (inscription, connexion, 2FA)
- [ ] Validation par email lors de l'inscription
- [ ] Authentification 2FA avec code par email
- [ ] JWT pour la gestion des sessions
- [ ] Gestion des r√¥les (USER, ADMIN)
- [ ] Guards pour endpoints priv√©s
- [ ] DTOs pour auth (RegisterDto, LoginDto, VerifyEmailDto, Verify2FADto)

### üé¨ WATCHLIST
- [ ] Module Movie/Watchlist cr√©√©
- [ ] CRUD films (Create, Read, Update, Delete)
- [ ] Ressources priv√©es par utilisateur
- [ ] Endpoint admin pour voir toutes les watchlists
- [ ] DTOs pour films (CreateMovieDto, UpdateMovieDto)

### üìß EMAIL & DOCUMENTATION
- [ ] Service d'email fonctionnel (validation + 2FA)
- [ ] Documentation Swagger compl√®te
- [ ] Gestion d'erreurs appropri√©e

## üìù EXEMPLES DE CODE

### DTOs Auth
```typescript
export class RegisterDto {
  @IsString()
  @IsNotEmpty()
  username: string;

  @IsEmail()
  email: string;

  @IsString()
  @MinLength(6)
  password: string;
}

export class LoginDto {
  @IsEmail()
  email: string;

  @IsString()
  password: string;
}

export class VerifyEmailDto {
  @IsString()
  @IsNotEmpty()
  token: string;
}

export class Verify2FADto {
  @IsString()
  @Length(6, 6)
  code: string;
}
```

### DTOs Movie
```typescript
export class CreateMovieDto {
  @IsString()
  @IsNotEmpty()
  title: string;

  @IsString()
  @IsOptional()
  description?: string;

  @IsNumber()
  @IsOptional()
  year?: number;
}
```

### Service Email
```typescript
@Injectable()
export class EmailService {
  async sendVerificationEmail(email: string, token: string) {
    // Email de validation d'inscription
  }

  async send2FACode(email: string, code: string) {
    // Code 2FA pour connexion
  }
}
```

### Guards & D√©corateurs
```typescript
@UseGuards(JwtAuthGuard)
@Roles(Role.ADMIN)
@Get('admin/movies')
async getAllMovies() {
  // Endpoint admin seulement
}

@UseGuards(JwtAuthGuard)
@Get('my-movies')
async getMyMovies(@Request() req) {
  // Films de l'utilisateur connect√©
}
```

### Documentation Swagger
```typescript
@ApiTags('auth')
@ApiOperation({ summary: 'Register new user' })
@ApiResponse({ status: 201, description: 'User registered, check email' })
@ApiResponse({ status: 400, description: 'Bad request' })
```

## üéØ PRIORIT√âS POUR 2H
### PHASE 1 - AUTHENTIFICATION (60 min)
1. **Module Auth** avec inscription/connexion (20 min)
2. **Validation par email** lors de l'inscription (15 min)
3. **2FA par email** lors de la connexion (15 min)
4. **JWT + Guards** pour s√©curisation (10 min)

### PHASE 2 - WATCHLIST (45 min)
5. **Module Movie** avec CRUD (20 min)
6. **Ressources priv√©es** par utilisateur (15 min)
7. **Endpoint admin** pour toutes les watchlists (10 min)

### PHASE 3 - FINALISATION (15 min)
8. **Documentation Swagger** compl√®te (10 min)
9. **Tests et corrections** (5 min) 